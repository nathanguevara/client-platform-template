---
import { createClient } from '@supabase/supabase-js';

const supabaseUrl = import.meta.env.SUPABASE_URL;
const supabaseKey = import.meta.env.SUPABASE_KEY;

function sanitize(str) {
  return typeof str === 'string'
    ? str.replace(/\n|\r|\t|\f|\v/g, ' ').replace(/\s+/g, ' ').trim()
    : str;
}

let projects = [];
let error = null;

if (supabaseUrl && supabaseKey) {
  const supabase = createClient(supabaseUrl, supabaseKey);
  const response = await supabase
    .from('projects')
    .select('*')
    .order('created_at', { ascending: false });
  projects = response.data || [];
  error = response.error;
}
---

<h1 class="text-4xl font-bold mb-8">Projects</h1>

<ul class="grid gap-6">
  {projects.map((project) => (
    <li class="border p-6 rounded-lg shadow hover:shadow-md transition">
      <h2 class="text-2xl font-semibold text-blue-600 mb-2">
        {sanitize(project.title)}
      </h2>
      <p class="text-gray-700 mb-1">{sanitize(project.description)}</p>
      <p class="text-sm text-gray-500 mb-4">Type: {sanitize(project.type)}</p>
      <div class="flex flex-wrap gap-4 text-sm">
        {project.repo_url && (
          <a
            href={sanitize(project.repo_url)}
            target="_blank"
            class="text-blue-600 hover:underline"
          >
            Source Code
          </a>
        )}
        {project.live_url && (
          <a
            href={sanitize(project.live_url)}
            target="_blank"
            class="text-green-600 hover:underline"
          >
            Live Site
          </a>
        )}
      </div>
    </li>
  ))}
</ul>
{error && <p>Error: {error.message}</p>}
